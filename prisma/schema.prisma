generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Character {
  id                String     @id @default(uuid())
  class             String     @default("Not chosen") @db.VarChar(32)
  mageTradition     String?    @map("mage_tradition") @db.VarChar(32)
  species           String     @default("Human") @db.VarChar(64)
  languages         String[]   @default(["Native", "Trade Cant"]) @db.VarChar(32)
  background        Background @relation(fields: [backgroundId], references: [id])
  backgroundDetails String?    @map("background_details")
  occupation        String     @default("Not chosen") @db.VarChar(64)
  name              String     @default("Anonymous") @db.VarChar(256)
  homeland          String?    @db.VarChar(256)
  goal              String     @default("My goal is to be the very best, like no one ever was.") @db.VarChar(256)
  description       String?
  image             String?
  experience        Int        @default(0)
  unspentPoints     Int        @default(0) @map("unspent_points")
  renown            Int        @default(0)
  maxHp             Int        @default(0) @map("max_hp")
  currentHp         Int        @default(0) @map("current_hp")
  condition         String?    @db.VarChar(64)
  currentStrain     Int        @default(0) @map("current_strain")
  totalMoney        Int[]      @default([0, 0, 0]) @map("total_money")
  stashedMoney      Int[]      @default([0, 0, 0]) @map("stashed_money") // in the future column in Party table
  isAlive           Boolean    @default(true) @map("is_alive")
  skillset          Skillset   @relation(fields: [skillsetId], references: [id])
  attributes        Attributes @relation(fields: [attributesId], references: [id])
  foci              Focus[]
  // spells
  // readiedItems @map("readied_items")
  // stowedItems @map("stowed_items")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  backgroundId      Int        @map("background_id")
  skillsetId        Int        @map("skillset_id")
  attributesId      Int        @map("attributes_id")
}

model Background {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(32)
  description      String
  Character        Character[]
  BackgroundThrows BackgroundThrows[]
}

model BackgroundThrows {
  id           Int        @id @default(autoincrement())
  background   Background @relation(fields: [backgroundId], references: [id])
  type         String     @db.VarChar(32)
  skill        String     @db.VarChar(32)
  countTwice   Boolean    @default(false) @map("count_twice")
  backgroundId Int        @map("background_id")
}

model Attributes {
  id                   Int             @id @default(autoincrement())
  strength             AttributeValues @relation(name: "StrengthValues", fields: [strengthValuesId], references: [id])
  dexterity            AttributeValues @relation(name: "DexterityValues", fields: [dexterityValuesId], references: [id])
  constitution         AttributeValues @relation(name: "ConstitutionValues", fields: [constitutionValuesId], references: [id])
  intelligence         AttributeValues @relation(name: "IntelligenceValues", fields: [intelligenceValuesId], references: [id])
  wisdom               AttributeValues @relation(name: "WisdomValues", fields: [wisdomValuesId], references: [id])
  charisma             AttributeValues @relation(name: "CharismaValues", fields: [charismaValuesId], references: [id])
  strengthValuesId     Int             @map("strength_values_id")
  dexterityValuesId    Int             @map("dexterity_values_id")
  constitutionValuesId Int             @map("constitution_values_id")
  intelligenceValuesId Int             @map("intelligence_values_id")
  wisdomValuesId       Int             @map("wisdom_values_id")
  charismaValuesId     Int             @map("charisma_values_id")
  Character            Character[]
}

model AttributeValues {
  id                 Int          @id @default(autoincrement())
  score              Int
  scoreBoost         Int?         @map("score_boost")
  modifier           Int?
  developedAttribute Int?         @map("developed_attribute")
  strengthValues     Attributes[] @relation("StrengthValues")
  dexterityValues    Attributes[] @relation("DexterityValues")
  constitutionValues Attributes[] @relation("ConstitutionValues")
  intelligenceValues Attributes[] @relation("IntelligenceValues")
  wisdomValues       Attributes[] @relation("WisdomValues")
  charismaValues     Attributes[] @relation("CharismaValues")
}

model Skill {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(32)
  description String
}

model Skillset {
  id        Int         @id @default(autoincrement())
  admin     Int?
  connect   Int?
  convince  Int?
  craft     Int?
  exert     Int?
  heal      Int?
  know      Int?
  lead      Int?
  magic     Int?
  notice    Int?
  perform   Int?
  pray      Int?
  punch     Int?
  ride      Int?
  sail      Int?
  shoot     Int?
  sneak     Int?
  stab      Int?
  survive   Int?
  trade     Int?
  work      Int?
  Character Character[]
}

model Focus {
  id                  Int         @id @default(autoincrement())
  name                String      @unique @db.VarChar(256)
  baseDescription     String      @map("base_description")
  levelOneDescription String?     @map("level_one_description")
  levelTwoDescription String?     @map("level_two_description")
  isExpansion         Boolean     @default(false) @map("is_expansion")
  Character           Character[]
}

model ClassAbilities {
  id                 Int     @id @default(autoincrement())
  class              String  @unique @db.VarChar(32)
  masterfulExpertise Boolean @default(false) @map("masterful_expertise")
  quickLearner       Boolean @default(false) @map("quick_learner")
  arcaneTradition    Boolean @default(false) @map("arcane_tradition")
  killingBlow        Boolean @default(false) @map("killing_blow")
  veteransLuck       Boolean @default(false) @map("veterans_luck")
}

model Item {
  id               Int     @id @default(autoincrement())
  name             String  @unique @db.VarChar(128)
  costSilver       Int     @map("cost_silver")
  encumbrance      Int
  quantity         Int?
  quantityModifier String? @map("quantity_modifier") @db.VarChar(64)
  isWeightless     Boolean @default(false) @map("is_weightless")
  isWeightlessWorn Boolean @default(false) @map("is_weightless_worn")
  canBeBundled     Boolean @default(false) @map("can_be_bundled")
}

model Weapon {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(128)
  costSilver   Int      @map("cost_silver")
  encumbrance  Int
  attribute    String   @db.VarChar(10)
  traits       String[]
  shockDmg     Int?     @map("shock_dmg")
  shockHit     Int?     @map("shock_hit")
  requiresAmmo Boolean  @default(false) @map("requires_ammo")
  closeRange   Int?     @map("close_range")
  farRange     Int?     @map("far_range")
}

model Armor {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(128)
  costSilver  Int     @map("cost_silver")
  encumbrance Int
  armorClass  Int     @map("armor_class")
  isShield    Boolean @default(false) @map("is_shield")
}

model Spell {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(64)
  description String
  level       Int
  tradition   String? @db.VarChar(32)
}

model Art {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(64)
  description String
  tradition   String? @db.VarChar(32)
}
